// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpcoauth/v1/oauth.proto

package grpcoauthv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Oauth2Service_GetAuthorizeCode_FullMethodName = "/grpcoauth.v1.Oauth2Service/GetAuthorizeCode"
	Oauth2Service_GetToken_FullMethodName         = "/grpcoauth.v1.Oauth2Service/GetToken"
)

// Oauth2ServiceClient is the client API for Oauth2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Oauth2ServiceClient interface {
	GetAuthorizeCode(ctx context.Context, in *GetAuthorizeCodeRequest, opts ...grpc.CallOption) (*GetAuthorizeCodeResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
}

type oauth2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauth2ServiceClient(cc grpc.ClientConnInterface) Oauth2ServiceClient {
	return &oauth2ServiceClient{cc}
}

func (c *oauth2ServiceClient) GetAuthorizeCode(ctx context.Context, in *GetAuthorizeCodeRequest, opts ...grpc.CallOption) (*GetAuthorizeCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorizeCodeResponse)
	err := c.cc.Invoke(ctx, Oauth2Service_GetAuthorizeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2ServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, Oauth2Service_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Oauth2ServiceServer is the server API for Oauth2Service service.
// All implementations must embed UnimplementedOauth2ServiceServer
// for forward compatibility.
type Oauth2ServiceServer interface {
	GetAuthorizeCode(context.Context, *GetAuthorizeCodeRequest) (*GetAuthorizeCodeResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	mustEmbedUnimplementedOauth2ServiceServer()
}

// UnimplementedOauth2ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOauth2ServiceServer struct{}

func (UnimplementedOauth2ServiceServer) GetAuthorizeCode(context.Context, *GetAuthorizeCodeRequest) (*GetAuthorizeCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizeCode not implemented")
}
func (UnimplementedOauth2ServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedOauth2ServiceServer) mustEmbedUnimplementedOauth2ServiceServer() {}
func (UnimplementedOauth2ServiceServer) testEmbeddedByValue()                       {}

// UnsafeOauth2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Oauth2ServiceServer will
// result in compilation errors.
type UnsafeOauth2ServiceServer interface {
	mustEmbedUnimplementedOauth2ServiceServer()
}

func RegisterOauth2ServiceServer(s grpc.ServiceRegistrar, srv Oauth2ServiceServer) {
	// If the following call pancis, it indicates UnimplementedOauth2ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Oauth2Service_ServiceDesc, srv)
}

func _Oauth2Service_GetAuthorizeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Oauth2ServiceServer).GetAuthorizeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth2Service_GetAuthorizeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Oauth2ServiceServer).GetAuthorizeCode(ctx, req.(*GetAuthorizeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth2Service_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Oauth2ServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth2Service_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Oauth2ServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Oauth2Service_ServiceDesc is the grpc.ServiceDesc for Oauth2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oauth2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcoauth.v1.Oauth2Service",
	HandlerType: (*Oauth2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorizeCode",
			Handler:    _Oauth2Service_GetAuthorizeCode_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Oauth2Service_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcoauth/v1/oauth.proto",
}

const (
	OauthCallbackService_Callback_FullMethodName = "/grpcoauth.v1.OauthCallbackService/Callback"
)

// OauthCallbackServiceClient is the client API for OauthCallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthCallbackServiceClient interface {
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthCallbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthCallbackServiceClient(cc grpc.ClientConnInterface) OauthCallbackServiceClient {
	return &oauthCallbackServiceClient{cc}
}

func (c *oauthCallbackServiceClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthCallbackService_Callback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthCallbackServiceServer is the server API for OauthCallbackService service.
// All implementations must embed UnimplementedOauthCallbackServiceServer
// for forward compatibility.
type OauthCallbackServiceServer interface {
	Callback(context.Context, *CallbackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthCallbackServiceServer()
}

// UnimplementedOauthCallbackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOauthCallbackServiceServer struct{}

func (UnimplementedOauthCallbackServiceServer) Callback(context.Context, *CallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedOauthCallbackServiceServer) mustEmbedUnimplementedOauthCallbackServiceServer() {}
func (UnimplementedOauthCallbackServiceServer) testEmbeddedByValue()                              {}

// UnsafeOauthCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthCallbackServiceServer will
// result in compilation errors.
type UnsafeOauthCallbackServiceServer interface {
	mustEmbedUnimplementedOauthCallbackServiceServer()
}

func RegisterOauthCallbackServiceServer(s grpc.ServiceRegistrar, srv OauthCallbackServiceServer) {
	// If the following call pancis, it indicates UnimplementedOauthCallbackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OauthCallbackService_ServiceDesc, srv)
}

func _OauthCallbackService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthCallbackServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthCallbackService_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthCallbackServiceServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthCallbackService_ServiceDesc is the grpc.ServiceDesc for OauthCallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthCallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcoauth.v1.OauthCallbackService",
	HandlerType: (*OauthCallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Callback",
			Handler:    _OauthCallbackService_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcoauth/v1/oauth.proto",
}
